@startuml daemon_sequence
skin rose
title Daemon sequence
participant Ubuntu
participant Daemon
Ubuntu -> Daemon: pid_file\nlog_file
activate Daemon
alt os.fork() > 0
    Daemon -> Ubuntu: raise SystemExit(0)
end
Daemon -> Daemon: os.chdir('/')
Daemon -> Daemon: os.umask(0)
Daemon -> Daemon: os.setsid()
alt os.fork() > 0
    Daemon -> Ubuntu: raise SystemExit(0)
end
Daemon -> Daemon: sys.stdout.flush()
Daemon -> Daemon: sys.stderr.flush()
Daemon -> Daemon: redirect stdout
note left of Daemon
    with open(log_file, 'a') as write_null:
        `# Redirect to 1 which means stdout
        os.dup2(write_null.fileno(), 1)
end note
Daemon -> Daemon: redirect stderr
note left of Daemon
    with open(log_file, 'a') as error_null:
        `# Redirect to 2 which means stderr
        os.dup2(error_null.fileno(), 2)
end note
Daemon -> Daemon: regist pid_file
note left of Daemon
    `# write parent process pid into pid file.
    if pid_file:
        with open(pid_file, 'w+') as f:
            f.write(str(os.getpid()))
        atexit.register(os.remove, pid_file)
end note
Daemon -> Ubuntu: signal.signal(signal.SIGTERM, sigterm_handler)
note left of Daemon
    def sigterm_handler(signo, frame):
        raise SystemExit(1)
end note
deactivate Daemon
@enduml
